{
  "README.html": {
    "href": "README.html",
    "title": "Documentation | BurstTriangulator",
    "keywords": "Documentation Place .dll files for Unity, Burst, Collections, etc. in the dlls/ folder. Navigate to the Documentation~/ folder. Build documentation using docfx. Optionally, if make is available, run make serve to build and open documentation in the browser. Note unity-xrefmap.yml contains cross-references between packages. This file is filled manually since there are only a few references to external definitions in the public API."
  },
  "api/andywiecko.BurstTriangulator.Extensions.AsNativeArray.html": {
    "href": "api/andywiecko.BurstTriangulator.Extensions.AsNativeArray.html",
    "title": "Method AsNativeArray | BurstTriangulator",
    "keywords": "Method AsNativeArray AsNativeArray<T>(T[], out Handle) Returns NativeArray<T> view on managed array with handle to prevents from deallocation. Warning! User has to call Free() manually to release the data for GC! Read more in the project manual. Declaration public static NativeArray<T> AsNativeArray<T>(this T[] array, out Handle handle) where T : unmanaged Parameters Type Name Description T[] array Array to view. Handle handle A handle that prevents the array from being deallocated by the GC. Returns Type Description NativeArray<T> NativeArray<T> view on managed array with NativeArray<T>. Type Parameters Name Description T The type of the elements."
  },
  "api/andywiecko.BurstTriangulator.Extensions.Run.html": {
    "href": "api/andywiecko.BurstTriangulator.Extensions.Run.html",
    "title": "Method Run | BurstTriangulator",
    "keywords": "Method Run Run(Triangulator<float2>) Declaration public static void Run(this Triangulator<float2> @this) Parameters Type Name Description Triangulator<float2> this Run(Triangulator<Vector2>) Declaration public static void Run(this Triangulator<Vector2> @this) Parameters Type Name Description Triangulator<Vector2> this Run(Triangulator<double2>) Declaration public static void Run(this Triangulator<double2> @this) Parameters Type Name Description Triangulator<double2> this Run(Triangulator<int2>) Declaration public static void Run(this Triangulator<int2> @this) Parameters Type Name Description Triangulator<int2> this Run(Triangulator<fp2>) Declaration public static void Run(this Triangulator<fp2> @this) Parameters Type Name Description Triangulator<fp2> this"
  },
  "api/andywiecko.BurstTriangulator.Extensions.Schedule.html": {
    "href": "api/andywiecko.BurstTriangulator.Extensions.Schedule.html",
    "title": "Method Schedule | BurstTriangulator",
    "keywords": "Method Schedule Schedule(Triangulator<float2>, JobHandle) Declaration public static JobHandle Schedule(this Triangulator<float2> @this, JobHandle dependencies = default) Parameters Type Name Description Triangulator<float2> this JobHandle dependencies Returns Type Description JobHandle Schedule(Triangulator<Vector2>, JobHandle) Declaration public static JobHandle Schedule(this Triangulator<Vector2> @this, JobHandle dependencies = default) Parameters Type Name Description Triangulator<Vector2> this JobHandle dependencies Returns Type Description JobHandle Schedule(Triangulator<double2>, JobHandle) Declaration public static JobHandle Schedule(this Triangulator<double2> @this, JobHandle dependencies = default) Parameters Type Name Description Triangulator<double2> this JobHandle dependencies Returns Type Description JobHandle Schedule(Triangulator<int2>, JobHandle) Declaration public static JobHandle Schedule(this Triangulator<int2> @this, JobHandle dependencies = default) Parameters Type Name Description Triangulator<int2> this JobHandle dependencies Returns Type Description JobHandle Schedule(Triangulator<fp2>, JobHandle) Declaration public static JobHandle Schedule(this Triangulator<fp2> @this, JobHandle dependencies = default) Parameters Type Name Description Triangulator<fp2> this JobHandle dependencies Returns Type Description JobHandle"
  },
  "api/andywiecko.BurstTriangulator.Extensions.html": {
    "href": "api/andywiecko.BurstTriangulator.Extensions.html",
    "title": "Class Extensions | BurstTriangulator",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public static class Extensions Methods Name Description AsNativeArray<T>(T[], out Handle) Returns NativeArray<T> view on managed array with handle to prevents from deallocation. Warning! User has to call Free() manually to release the data for GC! Read more in the project manual. Run(Triangulator<fp2>) Run(Triangulator<double2>) Run(Triangulator<float2>) Run(Triangulator<int2>) Run(Triangulator<Vector2>) Schedule(Triangulator<fp2>, JobHandle) Schedule(Triangulator<double2>, JobHandle) Schedule(Triangulator<float2>, JobHandle) Schedule(Triangulator<int2>, JobHandle) Schedule(Triangulator<Vector2>, JobHandle)"
  },
  "api/andywiecko.BurstTriangulator.Handle.-ctor.html": {
    "href": "api/andywiecko.BurstTriangulator.Handle.-ctor.html",
    "title": "Constructor Handle | BurstTriangulator",
    "keywords": "Constructor Handle Handle(ulong) Creates a Handle. Declaration public Handle(ulong gcHandle) Parameters Type Name Description ulong gcHandle The handle value, which can be obtained e.g. from PinGCArrayAndGetDataAddress(Array, out ulong) or PinGCObjectAndGetAddress(object, out ulong). See Also AsNativeArray<T>(T[], out Handle)"
  },
  "api/andywiecko.BurstTriangulator.Handle.Free.html": {
    "href": "api/andywiecko.BurstTriangulator.Handle.Free.html",
    "title": "Method Free | BurstTriangulator",
    "keywords": "Method Free Free() Releases the handle, allowing the object to be collected by the garbage collector. Declaration public void Free()"
  },
  "api/andywiecko.BurstTriangulator.Handle.html": {
    "href": "api/andywiecko.BurstTriangulator.Handle.html",
    "title": "Struct Handle | BurstTriangulator",
    "keywords": "Struct Handle A handle that prevents an object from being deallocated by the garbage collector (GC). Call Free() to release the object. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public readonly struct Handle Constructors Name Description Handle(ulong) Creates a Handle. Methods Name Description Free() Releases the handle, allowing the object to be collected by the garbage collector. See Also AsNativeArray<T>(T[], out Handle)"
  },
  "api/andywiecko.BurstTriangulator.InputData-1.ConstraintEdges.html": {
    "href": "api/andywiecko.BurstTriangulator.InputData-1.ConstraintEdges.html",
    "title": "Property ConstraintEdges | BurstTriangulator",
    "keywords": "Property ConstraintEdges ConstraintEdges Declaration public NativeArray<int> ConstraintEdges { get; set; } Property Value Type Description NativeArray<int>"
  },
  "api/andywiecko.BurstTriangulator.InputData-1.HoleSeeds.html": {
    "href": "api/andywiecko.BurstTriangulator.InputData-1.HoleSeeds.html",
    "title": "Property HoleSeeds | BurstTriangulator",
    "keywords": "Property HoleSeeds HoleSeeds Declaration public NativeArray<T2> HoleSeeds { get; set; } Property Value Type Description NativeArray<T2>"
  },
  "api/andywiecko.BurstTriangulator.InputData-1.Positions.html": {
    "href": "api/andywiecko.BurstTriangulator.InputData-1.Positions.html",
    "title": "Property Positions | BurstTriangulator",
    "keywords": "Property Positions Positions Declaration public NativeArray<T2> Positions { get; set; } Property Value Type Description NativeArray<T2>"
  },
  "api/andywiecko.BurstTriangulator.InputData-1.html": {
    "href": "api/andywiecko.BurstTriangulator.InputData-1.html",
    "title": "Class InputData<T2> | BurstTriangulator",
    "keywords": "Class InputData<T2> Inheritance object InputData<T2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public class InputData<T2> where T2 : unmanaged Type Parameters Name Description T2 Properties Name Description ConstraintEdges HoleSeeds Positions"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.-ctor.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.-ctor.html",
    "title": "Constructor Args | BurstTriangulator",
    "keywords": "Constructor Args Args(Preprocessor, int, bool, bool, bool, bool, bool, float, float, float) Declaration public Args(Preprocessor preprocessor, int sloanMaxIters, bool autoHolesAndBoundary, bool refineMesh, bool restoreBoundary, bool validateInput, bool verbose, float concentricShellsParameter, float refinementThresholdAngle, float refinementThresholdArea) Parameters Type Name Description Preprocessor preprocessor int sloanMaxIters bool autoHolesAndBoundary bool refineMesh bool restoreBoundary bool validateInput bool verbose float concentricShellsParameter float refinementThresholdAngle float refinementThresholdArea"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.AutoHolesAndBoundary.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.AutoHolesAndBoundary.html",
    "title": "Field AutoHolesAndBoundary | BurstTriangulator",
    "keywords": "Field AutoHolesAndBoundary Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly bool AutoHolesAndBoundary Returns Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.ConcentricShellsParameter.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.ConcentricShellsParameter.html",
    "title": "Field ConcentricShellsParameter | BurstTriangulator",
    "keywords": "Field ConcentricShellsParameter Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly float ConcentricShellsParameter Returns Type Description float"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.Default.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.Default.html",
    "title": "Method Default | BurstTriangulator",
    "keywords": "Method Default Default(Preprocessor, int, bool, bool, bool, bool, bool, float, float, float) Declaration public static Args Default(Preprocessor preprocessor = Preprocessor.None, int sloanMaxIters = 1000000, bool autoHolesAndBoundary = false, bool refineMesh = false, bool restoreBoundary = false, bool validateInput = true, bool verbose = true, float concentricShellsParameter = 0.001, float refinementThresholdAngle = 0.08726646, float refinementThresholdArea = 1) Parameters Type Name Description Preprocessor preprocessor int sloanMaxIters bool autoHolesAndBoundary bool refineMesh bool restoreBoundary bool validateInput bool verbose float concentricShellsParameter float refinementThresholdAngle float refinementThresholdArea Returns Type Description Args"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.Preprocessor.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.Preprocessor.html",
    "title": "Field Preprocessor | BurstTriangulator",
    "keywords": "Field Preprocessor Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly Preprocessor Preprocessor Returns Type Description Preprocessor"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RefineMesh.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RefineMesh.html",
    "title": "Field RefineMesh | BurstTriangulator",
    "keywords": "Field RefineMesh Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly bool RefineMesh Returns Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RefinementThresholdAngle.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RefinementThresholdAngle.html",
    "title": "Field RefinementThresholdAngle | BurstTriangulator",
    "keywords": "Field RefinementThresholdAngle Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly float RefinementThresholdAngle Returns Type Description float"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RefinementThresholdArea.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RefinementThresholdArea.html",
    "title": "Field RefinementThresholdArea | BurstTriangulator",
    "keywords": "Field RefinementThresholdArea Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly float RefinementThresholdArea Returns Type Description float"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RestoreBoundary.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.RestoreBoundary.html",
    "title": "Field RestoreBoundary | BurstTriangulator",
    "keywords": "Field RestoreBoundary Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly bool RestoreBoundary Returns Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.SloanMaxIters.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.SloanMaxIters.html",
    "title": "Field SloanMaxIters | BurstTriangulator",
    "keywords": "Field SloanMaxIters Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly int SloanMaxIters Returns Type Description int"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.ValidateInput.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.ValidateInput.html",
    "title": "Field ValidateInput | BurstTriangulator",
    "keywords": "Field ValidateInput Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly bool ValidateInput Returns Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.Verbose.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.Verbose.html",
    "title": "Field Verbose | BurstTriangulator",
    "keywords": "Field Verbose Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly bool Verbose Returns Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.With.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.With.html",
    "title": "Method With | BurstTriangulator",
    "keywords": "Method With With(Preprocessor?, int?, bool?, bool?, bool?, bool?, bool?, float?, float?, float?) Declaration public Args With(Preprocessor? preprocessor = null, int? sloanMaxIters = null, bool? autoHolesAndBoundary = null, bool? refineMesh = null, bool? restoreBoundary = null, bool? validateInput = null, bool? verbose = null, float? concentricShellsParameter = null, float? refinementThresholdAngle = null, float? refinementThresholdArea = null) Parameters Type Name Description Preprocessor? preprocessor int? sloanMaxIters bool? autoHolesAndBoundary bool? refineMesh bool? restoreBoundary bool? validateInput bool? verbose float? concentricShellsParameter float? refinementThresholdAngle float? refinementThresholdArea Returns Type Description Args"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.html",
    "title": "Struct Args | BurstTriangulator",
    "keywords": "Struct Args Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly struct Args Constructors Name Description Args(Preprocessor, int, bool, bool, bool, bool, bool, float, float, float) Fields Name Description AutoHolesAndBoundary ConcentricShellsParameter Preprocessor RefineMesh RefinementThresholdAngle RefinementThresholdArea RestoreBoundary SloanMaxIters ValidateInput Verbose Methods Name Description Default(Preprocessor, int, bool, bool, bool, bool, bool, float, float, float) With(Preprocessor?, int?, bool?, bool?, bool?, bool?, bool?, float?, float?, float?) Operators Name Description implicit operator Args(TriangulationSettings)"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.op_Implicit.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Args.op_Implicit.html",
    "title": "Operator implicit operator | BurstTriangulator",
    "keywords": "Operator implicit operator implicit operator Args(TriangulationSettings) Declaration public static implicit operator Args(TriangulationSettings settings) Parameters Type Name Description TriangulationSettings settings Returns Type Description Args"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.PlantHoleSeeds.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.PlantHoleSeeds.html",
    "title": "Method PlantHoleSeeds | BurstTriangulator",
    "keywords": "Method PlantHoleSeeds PlantHoleSeeds(UnsafeTriangulator, InputData<double2>, OutputData<double2>, Args, Allocator) Declaration public static void PlantHoleSeeds(this UnsafeTriangulator @this, InputData<double2> input, OutputData<double2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator this InputData<double2> input OutputData<double2> output Args args Allocator allocator PlantHoleSeeds(UnsafeTriangulator<float2>, InputData<float2>, OutputData<float2>, Args, Allocator) Declaration public static void PlantHoleSeeds(this UnsafeTriangulator<float2> @this, InputData<float2> input, OutputData<float2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<float2> this InputData<float2> input OutputData<float2> output Args args Allocator allocator PlantHoleSeeds(UnsafeTriangulator<Vector2>, InputData<Vector2>, OutputData<Vector2>, Args, Allocator) Declaration public static void PlantHoleSeeds(this UnsafeTriangulator<Vector2> @this, InputData<Vector2> input, OutputData<Vector2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<Vector2> this InputData<Vector2> input OutputData<Vector2> output Args args Allocator allocator PlantHoleSeeds(UnsafeTriangulator<double2>, InputData<double2>, OutputData<double2>, Args, Allocator) Declaration public static void PlantHoleSeeds(this UnsafeTriangulator<double2> @this, InputData<double2> input, OutputData<double2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<double2> this InputData<double2> input OutputData<double2> output Args args Allocator allocator PlantHoleSeeds(UnsafeTriangulator<int2>, InputData<int2>, OutputData<int2>, Args, Allocator) Declaration public static void PlantHoleSeeds(this UnsafeTriangulator<int2> @this, InputData<int2> input, OutputData<int2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<int2> this InputData<int2> input OutputData<int2> output Args args Allocator allocator PlantHoleSeeds(UnsafeTriangulator<fp2>, InputData<fp2>, OutputData<fp2>, Args, Allocator) Declaration public static void PlantHoleSeeds(this UnsafeTriangulator<fp2> @this, InputData<fp2> input, OutputData<fp2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<fp2> this InputData<fp2> input OutputData<fp2> output Args args Allocator allocator"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.RefineMesh.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.RefineMesh.html",
    "title": "Method RefineMesh | BurstTriangulator",
    "keywords": "Method RefineMesh RefineMesh(UnsafeTriangulator, OutputData<double2>, Allocator, double, double, double, bool) Declaration public static void RefineMesh(this UnsafeTriangulator @this, OutputData<double2> output, Allocator allocator, double areaThreshold = 1, double angleThreshold = 0.0872664626, double concentricShells = 0.001, bool constrainBoundary = false) Parameters Type Name Description UnsafeTriangulator this OutputData<double2> output Allocator allocator double areaThreshold double angleThreshold double concentricShells bool constrainBoundary RefineMesh(UnsafeTriangulator<float2>, OutputData<float2>, Allocator, float, float, float, bool) Declaration public static void RefineMesh(this UnsafeTriangulator<float2> @this, OutputData<float2> output, Allocator allocator, float areaThreshold = 1, float angleThreshold = 0.08726646, float concentricShells = 0.001, bool constrainBoundary = false) Parameters Type Name Description UnsafeTriangulator<float2> this OutputData<float2> output Allocator allocator float areaThreshold float angleThreshold float concentricShells bool constrainBoundary RefineMesh(UnsafeTriangulator<Vector2>, OutputData<Vector2>, Allocator, float, float, float, bool) Declaration public static void RefineMesh(this UnsafeTriangulator<Vector2> @this, OutputData<Vector2> output, Allocator allocator, float areaThreshold = 1, float angleThreshold = 0.08726646, float concentricShells = 0.001, bool constrainBoundary = false) Parameters Type Name Description UnsafeTriangulator<Vector2> this OutputData<Vector2> output Allocator allocator float areaThreshold float angleThreshold float concentricShells bool constrainBoundary RefineMesh(UnsafeTriangulator<double2>, OutputData<double2>, Allocator, double, double, double, bool) Declaration public static void RefineMesh(this UnsafeTriangulator<double2> @this, OutputData<double2> output, Allocator allocator, double areaThreshold = 1, double angleThreshold = 0.0872664626, double concentricShells = 0.001, bool constrainBoundary = false) Parameters Type Name Description UnsafeTriangulator<double2> this OutputData<double2> output Allocator allocator double areaThreshold double angleThreshold double concentricShells bool constrainBoundary RefineMesh(UnsafeTriangulator<fp2>, OutputData<fp2>, Allocator, fp?, fp?, fp?, bool) Declaration public static void RefineMesh(this UnsafeTriangulator<fp2> @this, OutputData<fp2> output, Allocator allocator, fp? areaThreshold = null, fp? angleThreshold = null, fp? concentricShells = null, bool constrainBoundary = false) Parameters Type Name Description UnsafeTriangulator<fp2> this OutputData<fp2> output Allocator allocator fp? areaThreshold fp? angleThreshold fp? concentricShells bool constrainBoundary"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.Triangulate.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.Triangulate.html",
    "title": "Method Triangulate | BurstTriangulator",
    "keywords": "Method Triangulate Triangulate(UnsafeTriangulator, InputData<double2>, OutputData<double2>, Args, Allocator) Declaration public static void Triangulate(this UnsafeTriangulator @this, InputData<double2> input, OutputData<double2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator this InputData<double2> input OutputData<double2> output Args args Allocator allocator Triangulate(UnsafeTriangulator<float2>, InputData<float2>, OutputData<float2>, Args, Allocator) Declaration public static void Triangulate(this UnsafeTriangulator<float2> @this, InputData<float2> input, OutputData<float2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<float2> this InputData<float2> input OutputData<float2> output Args args Allocator allocator Triangulate(UnsafeTriangulator<Vector2>, InputData<Vector2>, OutputData<Vector2>, Args, Allocator) Declaration public static void Triangulate(this UnsafeTriangulator<Vector2> @this, InputData<Vector2> input, OutputData<Vector2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<Vector2> this InputData<Vector2> input OutputData<Vector2> output Args args Allocator allocator Triangulate(UnsafeTriangulator<double2>, InputData<double2>, OutputData<double2>, Args, Allocator) Declaration public static void Triangulate(this UnsafeTriangulator<double2> @this, InputData<double2> input, OutputData<double2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<double2> this InputData<double2> input OutputData<double2> output Args args Allocator allocator Triangulate(UnsafeTriangulator<int2>, InputData<int2>, OutputData<int2>, Args, Allocator) Declaration public static void Triangulate(this UnsafeTriangulator<int2> @this, InputData<int2> input, OutputData<int2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<int2> this InputData<int2> input OutputData<int2> output Args args Allocator allocator Triangulate(UnsafeTriangulator<fp2>, InputData<fp2>, OutputData<fp2>, Args, Allocator) Declaration public static void Triangulate(this UnsafeTriangulator<fp2> @this, InputData<fp2> input, OutputData<fp2> output, Args args, Allocator allocator) Parameters Type Name Description UnsafeTriangulator<fp2> this InputData<fp2> input OutputData<fp2> output Args args Allocator allocator"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.Extensions.html",
    "title": "Class Extensions | BurstTriangulator",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public static class Extensions Methods Name Description PlantHoleSeeds(UnsafeTriangulator, InputData<double2>, OutputData<double2>, Args, Allocator) PlantHoleSeeds(UnsafeTriangulator<fp2>, InputData<fp2>, OutputData<fp2>, Args, Allocator) PlantHoleSeeds(UnsafeTriangulator<double2>, InputData<double2>, OutputData<double2>, Args, Allocator) PlantHoleSeeds(UnsafeTriangulator<float2>, InputData<float2>, OutputData<float2>, Args, Allocator) PlantHoleSeeds(UnsafeTriangulator<int2>, InputData<int2>, OutputData<int2>, Args, Allocator) PlantHoleSeeds(UnsafeTriangulator<Vector2>, InputData<Vector2>, OutputData<Vector2>, Args, Allocator) RefineMesh(UnsafeTriangulator, OutputData<double2>, Allocator, double, double, double, bool) RefineMesh(UnsafeTriangulator<fp2>, OutputData<fp2>, Allocator, fp?, fp?, fp?, bool) RefineMesh(UnsafeTriangulator<double2>, OutputData<double2>, Allocator, double, double, double, bool) RefineMesh(UnsafeTriangulator<float2>, OutputData<float2>, Allocator, float, float, float, bool) RefineMesh(UnsafeTriangulator<Vector2>, OutputData<Vector2>, Allocator, float, float, float, bool) Triangulate(UnsafeTriangulator, InputData<double2>, OutputData<double2>, Args, Allocator) Triangulate(UnsafeTriangulator<fp2>, InputData<fp2>, OutputData<fp2>, Args, Allocator) Triangulate(UnsafeTriangulator<double2>, InputData<double2>, OutputData<double2>, Args, Allocator) Triangulate(UnsafeTriangulator<float2>, InputData<float2>, OutputData<float2>, Args, Allocator) Triangulate(UnsafeTriangulator<int2>, InputData<int2>, OutputData<int2>, Args, Allocator) Triangulate(UnsafeTriangulator<Vector2>, InputData<Vector2>, OutputData<Vector2>, Args, Allocator)"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.ConstraintEdges.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.ConstraintEdges.html",
    "title": "Field ConstraintEdges | BurstTriangulator",
    "keywords": "Field ConstraintEdges Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeArray<int> ConstraintEdges Returns Type Description NativeArray<int>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.HoleSeeds.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.HoleSeeds.html",
    "title": "Field HoleSeeds | BurstTriangulator",
    "keywords": "Field HoleSeeds Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeArray<T2> HoleSeeds Returns Type Description NativeArray<T2>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.Positions.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.Positions.html",
    "title": "Field Positions | BurstTriangulator",
    "keywords": "Field Positions Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeArray<T2> Positions Returns Type Description NativeArray<T2>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.InputData-1.html",
    "title": "Struct InputData<T2> | BurstTriangulator",
    "keywords": "Struct InputData<T2> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public struct InputData<T2> where T2 : unmanaged Type Parameters Name Description T2 Fields Name Description ConstraintEdges HoleSeeds Positions"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.ConstrainedHalfedges.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.ConstrainedHalfedges.html",
    "title": "Field ConstrainedHalfedges | BurstTriangulator",
    "keywords": "Field ConstrainedHalfedges Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeList<bool> ConstrainedHalfedges Returns Type Description NativeList<bool>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Halfedges.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Halfedges.html",
    "title": "Field Halfedges | BurstTriangulator",
    "keywords": "Field Halfedges Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeList<int> Halfedges Returns Type Description NativeList<int>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Positions.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Positions.html",
    "title": "Field Positions | BurstTriangulator",
    "keywords": "Field Positions Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeList<T2> Positions Returns Type Description NativeList<T2>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Status.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Status.html",
    "title": "Field Status | BurstTriangulator",
    "keywords": "Field Status Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeReference<Status> Status Returns Type Description NativeReference<Status>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Triangles.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.Triangles.html",
    "title": "Field Triangles | BurstTriangulator",
    "keywords": "Field Triangles Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public NativeList<int> Triangles Returns Type Description NativeList<int>"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.OutputData-1.html",
    "title": "Struct OutputData<T2> | BurstTriangulator",
    "keywords": "Struct OutputData<T2> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public struct OutputData<T2> where T2 : unmanaged Type Parameters Name Description T2 Fields Name Description ConstrainedHalfedges Halfedges Positions Status Triangles"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.UnsafeTriangulator-1.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.UnsafeTriangulator-1.html",
    "title": "Struct UnsafeTriangulator<T2> | BurstTriangulator",
    "keywords": "Struct UnsafeTriangulator<T2> A readonly struct that corresponds to Triangulator<T2>. This struct can be used directly in a native context within the jobs pipeline. The API is accessible through Extensions. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly struct UnsafeTriangulator<T2> where T2 : unmanaged Type Parameters Name Description T2 The coordinate type. Supported types include: float2, Vector2, double2, Unity.Mathematics.FixedPoint.fp2, and int2. For more information on type restrictions, refer to the documentation. Remarks Unsafe in this context indicates that using the method may be challenging for beginner users. The user is responsible for managing data allocation (both input and output). Some permutations of the method calls may not be supported. Refer to the documentation for more details. The term unsafe does not refer to memory safety. See Also Extensions"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.UnsafeTriangulator.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.UnsafeTriangulator.html",
    "title": "Struct UnsafeTriangulator | BurstTriangulator",
    "keywords": "Struct UnsafeTriangulator A wrapper for UnsafeTriangulator<T2> where T2 is double2. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: andywiecko.BurstTriangulator.LowLevel.Unsafe Assembly: .dll Syntax public readonly struct UnsafeTriangulator Extension Methods Extensions.PlantHoleSeeds(UnsafeTriangulator, InputData<double2>, OutputData<double2>, Args, Allocator) Extensions.RefineMesh(UnsafeTriangulator, OutputData<double2>, Allocator, double, double, double, bool) Extensions.Triangulate(UnsafeTriangulator, InputData<double2>, OutputData<double2>, Args, Allocator)"
  },
  "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.html": {
    "href": "api/andywiecko.BurstTriangulator.LowLevel.Unsafe.html",
    "title": "Namespace andywiecko.BurstTriangulator.LowLevel.Unsafe | BurstTriangulator",
    "keywords": "Namespace andywiecko.BurstTriangulator.LowLevel.Unsafe Classes Extensions Structs Args InputData<T2> OutputData<T2> UnsafeTriangulator A wrapper for UnsafeTriangulator<T2> where T2 is double2. UnsafeTriangulator<T2> A readonly struct that corresponds to Triangulator<T2>. This struct can be used directly in a native context within the jobs pipeline. The API is accessible through Extensions."
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.-ctor.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.-ctor.html",
    "title": "Constructor OutputData | BurstTriangulator",
    "keywords": "Constructor OutputData OutputData(Triangulator<T2>) Declaration public OutputData(Triangulator<T2> owner) Parameters Type Name Description Triangulator<T2> owner"
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.ConstrainedHalfedges.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.ConstrainedHalfedges.html",
    "title": "Property ConstrainedHalfedges | BurstTriangulator",
    "keywords": "Property ConstrainedHalfedges ConstrainedHalfedges Declaration public NativeList<bool> ConstrainedHalfedges { get; } Property Value Type Description NativeList<bool>"
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.Halfedges.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.Halfedges.html",
    "title": "Property Halfedges | BurstTriangulator",
    "keywords": "Property Halfedges Halfedges Declaration public NativeList<int> Halfedges { get; } Property Value Type Description NativeList<int>"
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.Positions.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.Positions.html",
    "title": "Property Positions | BurstTriangulator",
    "keywords": "Property Positions Positions Declaration public NativeList<T2> Positions { get; } Property Value Type Description NativeList<T2>"
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.Status.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.Status.html",
    "title": "Property Status | BurstTriangulator",
    "keywords": "Property Status Status Declaration public NativeReference<Status> Status { get; } Property Value Type Description NativeReference<Status>"
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.Triangles.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.Triangles.html",
    "title": "Property Triangles | BurstTriangulator",
    "keywords": "Property Triangles Triangles Declaration public NativeList<int> Triangles { get; } Property Value Type Description NativeList<int>"
  },
  "api/andywiecko.BurstTriangulator.OutputData-1.html": {
    "href": "api/andywiecko.BurstTriangulator.OutputData-1.html",
    "title": "Class OutputData<T2> | BurstTriangulator",
    "keywords": "Class OutputData<T2> Inheritance object OutputData<T2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public class OutputData<T2> where T2 : unmanaged Type Parameters Name Description T2 Constructors Name Description OutputData(Triangulator<T2>) Properties Name Description ConstrainedHalfedges Halfedges Positions Status Triangles"
  },
  "api/andywiecko.BurstTriangulator.Preprocessor.html": {
    "href": "api/andywiecko.BurstTriangulator.Preprocessor.html",
    "title": "Enum Preprocessor | BurstTriangulator",
    "keywords": "Enum Preprocessor Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public enum Preprocessor Fields Name Description COM Transforms UnityEngine.Input to local coordinate system using center of mass. None PCA Transforms UnityEngine.Input using coordinate system obtained from principal component analysis."
  },
  "api/andywiecko.BurstTriangulator.RefinementThresholds.Angle.html": {
    "href": "api/andywiecko.BurstTriangulator.RefinementThresholds.Angle.html",
    "title": "Property Angle | BurstTriangulator",
    "keywords": "Property Angle Angle Specifies the refinement angle constraint for triangles in the resulting mesh. Ensures that no triangle in the mesh has an angle smaller than the specified value. Declaration public float Angle { get; set; } Property Value Type Description float Remarks Expressed in radians."
  },
  "api/andywiecko.BurstTriangulator.RefinementThresholds.Area.html": {
    "href": "api/andywiecko.BurstTriangulator.RefinementThresholds.Area.html",
    "title": "Property Area | BurstTriangulator",
    "keywords": "Property Area Area Specifies the maximum area constraint for triangles in the resulting mesh refinement. Ensures that no triangle in the mesh has an area larger than the specified value. Declaration public float Area { get; set; } Property Value Type Description float"
  },
  "api/andywiecko.BurstTriangulator.RefinementThresholds.html": {
    "href": "api/andywiecko.BurstTriangulator.RefinementThresholds.html",
    "title": "Class RefinementThresholds | BurstTriangulator",
    "keywords": "Class RefinementThresholds Inheritance object RefinementThresholds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax [Serializable] public class RefinementThresholds Properties Name Description Angle Specifies the refinement angle constraint for triangles in the resulting mesh. Ensures that no triangle in the mesh has an angle smaller than the specified value. Area Specifies the maximum area constraint for triangles in the resulting mesh refinement. Ensures that no triangle in the mesh has an area larger than the specified value."
  },
  "api/andywiecko.BurstTriangulator.Status.html": {
    "href": "api/andywiecko.BurstTriangulator.Status.html",
    "title": "Enum Status | BurstTriangulator",
    "keywords": "Enum Status Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public enum Status Fields Name Description ERR State may suggest that some error occurs during triangulation. See console for more details. OK State corresponds to triangulation completed successfully."
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.AutoHolesAndBoundary.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.AutoHolesAndBoundary.html",
    "title": "Property AutoHolesAndBoundary | BurstTriangulator",
    "keywords": "Property AutoHolesAndBoundary AutoHolesAndBoundary If set to true, holes and boundaries will be created automatically depending on the provided ConstraintEdges. Declaration public bool AutoHolesAndBoundary { get; set; } Property Value Type Description bool Remarks The current implementation detects only 1-level islands. It will not detect holes in solid meshes inside other holes."
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.ConcentricShellsParameter.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.ConcentricShellsParameter.html",
    "title": "Property ConcentricShellsParameter | BurstTriangulator",
    "keywords": "Property ConcentricShellsParameter ConcentricShellsParameter Constant used in concentric shells segment splitting. Modify this only if you know what you are doing! Declaration public float ConcentricShellsParameter { get; set; } Property Value Type Description float"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.Preprocessor.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.Preprocessor.html",
    "title": "Property Preprocessor | BurstTriangulator",
    "keywords": "Property Preprocessor Preprocessor Preprocessing algorithm for the input data. Default is None. Declaration public Preprocessor Preprocessor { get; set; } Property Value Type Description Preprocessor"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.RefineMesh.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.RefineMesh.html",
    "title": "Property RefineMesh | BurstTriangulator",
    "keywords": "Property RefineMesh RefineMesh If true refines mesh using Ruppert's algorithm. Declaration public bool RefineMesh { get; set; } Property Value Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.RefinementThresholds.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.RefinementThresholds.html",
    "title": "Property RefinementThresholds | BurstTriangulator",
    "keywords": "Property RefinementThresholds RefinementThresholds Declaration public RefinementThresholds RefinementThresholds { get; } Property Value Type Description RefinementThresholds"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.RestoreBoundary.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.RestoreBoundary.html",
    "title": "Property RestoreBoundary | BurstTriangulator",
    "keywords": "Property RestoreBoundary RestoreBoundary If true the mesh boundary is restored using ConstraintEdges. Declaration public bool RestoreBoundary { get; set; } Property Value Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.SloanMaxIters.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.SloanMaxIters.html",
    "title": "Property SloanMaxIters | BurstTriangulator",
    "keywords": "Property SloanMaxIters SloanMaxIters Max iteration count during Sloan's algorithm (constraining edges). Modify this only if you know what you are doing. Declaration public int SloanMaxIters { get; set; } Property Value Type Description int"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.ValidateInput.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.ValidateInput.html",
    "title": "Property ValidateInput | BurstTriangulator",
    "keywords": "Property ValidateInput ValidateInput If set to true, the provided data will be validated before running the triangulation procedure. Input positions, as well as input constraints, have a few restrictions. See README.md for more details. If one of the conditions fails, the triangulation will not be calculated. This can be detected as an error by inspecting Status value (native, can be used in jobs). Additionally, if Verbose is set to true, the corresponding error will be logged in the Console. Declaration public bool ValidateInput { get; set; } Property Value Type Description bool"
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.Verbose.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.Verbose.html",
    "title": "Property Verbose | BurstTriangulator",
    "keywords": "Property Verbose Verbose If set to true, caught errors with Triangulator will be logged in the Console. Declaration public bool Verbose { get; set; } Property Value Type Description bool Remarks See also the ValidateInput settings."
  },
  "api/andywiecko.BurstTriangulator.TriangulationSettings.html": {
    "href": "api/andywiecko.BurstTriangulator.TriangulationSettings.html",
    "title": "Class TriangulationSettings | BurstTriangulator",
    "keywords": "Class TriangulationSettings Inheritance object TriangulationSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax [Serializable] public class TriangulationSettings Properties Name Description AutoHolesAndBoundary If set to true, holes and boundaries will be created automatically depending on the provided ConstraintEdges. ConcentricShellsParameter Constant used in concentric shells segment splitting. Modify this only if you know what you are doing! Preprocessor Preprocessing algorithm for the input data. Default is None. RefineMesh If true refines mesh using Ruppert's algorithm. RefinementThresholds RestoreBoundary If true the mesh boundary is restored using ConstraintEdges. SloanMaxIters Max iteration count during Sloan's algorithm (constraining edges). Modify this only if you know what you are doing. ValidateInput If set to true, the provided data will be validated before running the triangulation procedure. Input positions, as well as input constraints, have a few restrictions. See README.md for more details. If one of the conditions fails, the triangulation will not be calculated. This can be detected as an error by inspecting Status value (native, can be used in jobs). Additionally, if Verbose is set to true, the corresponding error will be logged in the Console. Verbose If set to true, caught errors with Triangulator will be logged in the Console."
  },
  "api/andywiecko.BurstTriangulator.Triangulator-1.-ctor.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator-1.-ctor.html",
    "title": "Constructor Triangulator | BurstTriangulator",
    "keywords": "Constructor Triangulator Triangulator(int, Allocator) Declaration public Triangulator(int capacity, Allocator allocator) Parameters Type Name Description int capacity Allocator allocator Triangulator(Allocator) Declaration public Triangulator(Allocator allocator) Parameters Type Name Description Allocator allocator"
  },
  "api/andywiecko.BurstTriangulator.Triangulator-1.Dispose.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator-1.Dispose.html",
    "title": "Method Dispose | BurstTriangulator",
    "keywords": "Method Dispose Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/andywiecko.BurstTriangulator.Triangulator-1.Input.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator-1.Input.html",
    "title": "Property Input | BurstTriangulator",
    "keywords": "Property Input Input Declaration public InputData<T2> Input { get; set; } Property Value Type Description InputData<T2>"
  },
  "api/andywiecko.BurstTriangulator.Triangulator-1.Output.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator-1.Output.html",
    "title": "Property Output | BurstTriangulator",
    "keywords": "Property Output Output Declaration public OutputData<T2> Output { get; } Property Value Type Description OutputData<T2>"
  },
  "api/andywiecko.BurstTriangulator.Triangulator-1.Settings.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator-1.Settings.html",
    "title": "Property Settings | BurstTriangulator",
    "keywords": "Property Settings Settings Declaration public TriangulationSettings Settings { get; } Property Value Type Description TriangulationSettings"
  },
  "api/andywiecko.BurstTriangulator.Triangulator-1.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator-1.html",
    "title": "Class Triangulator<T2> | BurstTriangulator",
    "keywords": "Class Triangulator<T2> Inheritance object Triangulator<T2> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public class Triangulator<T2> : IDisposable where T2 : unmanaged Type Parameters Name Description T2 Constructors Name Description Triangulator(int, Allocator) Triangulator(Allocator) Properties Name Description Input Output Settings Methods Name Description Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources."
  },
  "api/andywiecko.BurstTriangulator.Triangulator.-ctor.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.-ctor.html",
    "title": "Constructor Triangulator | BurstTriangulator",
    "keywords": "Constructor Triangulator Triangulator(int, Allocator) Declaration public Triangulator(int capacity, Allocator allocator) Parameters Type Name Description int capacity Allocator allocator Triangulator(Allocator) Declaration public Triangulator(Allocator allocator) Parameters Type Name Description Allocator allocator"
  },
  "api/andywiecko.BurstTriangulator.Triangulator.Dispose.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.Dispose.html",
    "title": "Method Dispose | BurstTriangulator",
    "keywords": "Method Dispose Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/andywiecko.BurstTriangulator.Triangulator.Input.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.Input.html",
    "title": "Property Input | BurstTriangulator",
    "keywords": "Property Input Input Declaration public InputData<double2> Input { get; set; } Property Value Type Description InputData<double2>"
  },
  "api/andywiecko.BurstTriangulator.Triangulator.Output.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.Output.html",
    "title": "Property Output | BurstTriangulator",
    "keywords": "Property Output Output Declaration public OutputData<double2> Output { get; } Property Value Type Description OutputData<double2>"
  },
  "api/andywiecko.BurstTriangulator.Triangulator.Run.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.Run.html",
    "title": "Method Run | BurstTriangulator",
    "keywords": "Method Run Run() Perform the job's Execute method immediately on the same thread. Declaration public void Run()"
  },
  "api/andywiecko.BurstTriangulator.Triangulator.Schedule.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.Schedule.html",
    "title": "Method Schedule | BurstTriangulator",
    "keywords": "Method Schedule Schedule(JobHandle) Schedule the job for execution on a worker thread. Declaration public JobHandle Schedule(JobHandle dependencies = default) Parameters Type Name Description JobHandle dependencies Dependencies are used to ensure that a job executes on worker threads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel. Returns Type Description JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread."
  },
  "api/andywiecko.BurstTriangulator.Triangulator.Settings.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.Settings.html",
    "title": "Property Settings | BurstTriangulator",
    "keywords": "Property Settings Settings Declaration public TriangulationSettings Settings { get; } Property Value Type Description TriangulationSettings"
  },
  "api/andywiecko.BurstTriangulator.Triangulator.html": {
    "href": "api/andywiecko.BurstTriangulator.Triangulator.html",
    "title": "Class Triangulator | BurstTriangulator",
    "keywords": "Class Triangulator Inheritance object Triangulator Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: andywiecko.BurstTriangulator Assembly: .dll Syntax public class Triangulator : IDisposable Constructors Name Description Triangulator(int, Allocator) Triangulator(Allocator) Properties Name Description Input Output Settings Methods Name Description Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Run() Perform the job's Execute method immediately on the same thread. Schedule(JobHandle) Schedule the job for execution on a worker thread."
  },
  "api/andywiecko.BurstTriangulator.html": {
    "href": "api/andywiecko.BurstTriangulator.html",
    "title": "Namespace andywiecko.BurstTriangulator | BurstTriangulator",
    "keywords": "Namespace andywiecko.BurstTriangulator Classes Extensions InputData<T2> OutputData<T2> RefinementThresholds TriangulationSettings Triangulator Triangulator<T2> Structs Handle A handle that prevents an object from being deallocated by the garbage collector (GC). Call Free() to release the object. Enums Preprocessor Status"
  },
  "api/andywiecko.html": {
    "href": "api/andywiecko.html",
    "title": "",
    "keywords": ""
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| BurstTriangulator",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Change log | BurstTriangulator",
    "keywords": "Change log All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. For online version see Github Releases. 3.2.0 – 2024-08-28 Added Support for additional types: Vector2, int2, and fp2 (fixed-point in Q31.32 format). Note: fp2 requires an optional dependency. Refer to the manual for more details. (Internal) Introduced TrianglesComparer to simplify triangle assertions in tests. Args is now blittable and can be used in Burst-compiled static methods. Enhanced validation logs to include position information. Changed (Internal) Various simplifications, minor performance improvements, refactoring, and additional code comments. Deprecated AsNativeArray() and ManagedInput have been deprecated for safety reasons. Use AsNativeArray(out Handle handle) instead. Refer to the manual for more information. Fixed Corrected the refinement of concentric shells segment splitting factor alpha. Fixed safety issues with AsNativeArray. Fully collinear input is now handled correctly. 3.1.0 – 2024-08-01 Added Native support with a low-level API for triangulation via UnsafeTriangulator<T>. This allows for customization of steps and calling triangulation directly from jobs. Extensions for UnsafeTriangulator<T>: Triangulate, PlantHoleSeeds, and RefineMesh. Support for managed input. Public ConstrainedHalfedges in triangulation output. Fixed Edge-edge intersection for collinear non-intersecting edges (issue #173). 3.0.0 – 2024-06-30 Added New online documentation (including manual and scripting API): https://andywiecko.github.io/BurstTriangulator/ Verbose option in triangulation settings. Halfedges for triangulation output. AutoHolesAndBoundary option in triangulation settings. This option allows for automatic hole detection, eliminating the need for the user to provide hole positions. Holes are calculated using constraint edges. Support for generic coordinates. Users can specify the type of coordinates used in the triangulation with Triangulator<T2>. The API for this class is the same as Triangulator, except the input/output is of type T2. Supported coordinate types: float2, double2 (int2 will be implemented in the future). Changed Increased performance for constrainedHalfedges generation. Circle based calculations now use RadiusSq instead of Radius. This results in increased performance in the refinement step, however, the final results may be slightly different. Breaking change: Moved most of the inner types (e.g., Status, TriangulatorSettings, etc.) to the global namespace. They can now be accessed directly using using andywiecko.BurstTriangulator;. Breaking change: The default coordinate type for Triangulator is now double2 instead of float2. (Internal) Greatly simplified job logic replaced with steps. Overall triangulation logic is now easier to follow and read. Some internal structs were removed or hidden inside steps. Removed Obsolete settings: BatchCount, MinimumAngle, MinimumArea, MaximumArea, and ConstrainEdges. Fixed Run triangulator on the main thread using the Run() method. 2.5.0 – 2024-04-03 Changed Simplified PlantingSeedJob by removing generics and introducing an algorithm based on constraintEdges. This resulted in improved performance. Changed the triangulator to schedule a single job instead of multiple smaller ones. Greatly simplified the preprocessor transformations code. All transformations are now represented by the AffineTransform2D struct, and several jobs have been removed. Deprecated Deprecated the Triangulator.Settings.ConstrainEdges property. To enable constrained edges, pass the corresponding array into input. Deprecated the Triangulator.Settings.BatchCount property. This property is no longer used, setting it has no effect. Fixed Fixed constructing pointToHalfedges during constraint resolution. This resolves GitHub issue #111. 2.4.0 – 2023-12-23 Added Introduce ConcentricShellParameter in TriangulationSettings, serving as a constant for concentric shells segment splitting. Add RefinementThresholds in TriangulationSettings, including .Area and .Angle. Previous corresponding parameters are marked with obsolete. Changed Enhance triangulation refinement for improved quality and performance. Replace the previous algorithm with a new one, similar to Shewchuk's terminator algorithm. The refined mesh now exhibits non-uniform triangle density, with increased density near boundaries and decreased density in the mesh bulk. Update README.md to include a comparison between different refinement settings. Remove the super-triangle approach (resulting in a slight performance boost). Perform refinement after removing holes and boundaries for better refinement quality. Deprecated Mark MinimumArea, MaximumArea, and MinimumAngle as obsolete. Replace these parameters with the more versatile RefinementThresholds. 2.3.0 – 2023-10-25 Changed Improved performance by adapting triangulation with mesh refinement to a half-edges approach. Simplified the refinement job contract. Merged several internal jobs for better efficiency. General project simplification for enhanced maintainability. Removed Eliminated edgeToTriangles and triangleToEdges mappings. Removed the internal Triangle struct. 2.2.0 ⁠– 2023-10-03 Changed Simplified constrained triangulation scheduling jobs pipeline. Adapted constrained triangulation for half-edges approach, which significantly improved performance. The algorithm no longer relies on triangulation mappings, such as edge-to-triangle and triangle-to-edge relationships (or circles). The complexity of the intersection searching algorithm has been reduced from a naive O(n^2) solution to O(n log n). Fixed Resolved Sloan algorithm corner cases. In previous releases, constrained triangulation may get stuck. Constrained triangulation is now more robust. Added Added constrained triangulation benchmark test. The results may be found at README.md. 2.1.0 ⁠– 2023-09-17 Changed Replaced the classic Delaunay algorithm (without refinement/constraints) with an implementation based on half-edges (see delaunator and delaunator-sharp for more details). This change has led to a significant performance boost in unconstrained triangulation. See README.md for more details. Refactored some internal math utilities. 2.0.0 ⁠– 2023-09-09 Added Introduced the Preprocessor enum with the following options: None, COM, and PCA. This enum replaces the previous transformation settings (UseLocalTransformation/UsePCATransformation). Introduced the Status (with values OK, ERR) enum along with corresponding native data. This enum is now utilized for input validation, with functionality extending beyond the Unity editor to encompass validation in builds as well. Added a benchmark test for mesh refinement, which will be used for future performance measurement. Changed Default values for TriangulationSettings. Updated Unity Editor to version 2022.2.1f1. Bumped dependencies: Burst to 1.8.7, Collections to 2.2.0. Removed Removed the following deprecated methods: Schedule(NativeArray<float2>, ...). Removed the following deprecated properties: Positions, Triangles, PositionsDeferred, PositionsDeferred. Removed the internal TriangulatorNativeData as part of a significant refactor to simplify the code structure. Internal implementations were cleaned up, and code structure was simplified. 1.5.0 ⁠– 2023-04-12 Added Added PCA transformation for input positions and holes. Fixed Editor hangs during Sloan algorithm for specific input data (issues #30 and #31). 1.4.0 ⁠– 2022-11-01 Added Added option for transforming input positions (as well as holes) into normalized local space, i.e. [-1, 1] box. Converting points into normalized local space could increase numerical accuracy. Fixed Fix deferred array support in triangulator input. Add missing constraint position range validation. Fix whitespaces in code and README.md. 1.3.0 ⁠– 2022-04-09 Added Restoring input boundaries. The feature allows for restoring a given boundary from triangulation input. It is necessary to provide constraints, as well as enable corresponding options in the triangulation settings, aka RestoreBoundary. Support for holes in the mesh. Upload project's logo generated using the above features. Changed More verbose warnings during input validation. 1.2.0 ⁠– 2022-04-02 Added Add support for the Constraint Delaunay Triangulation with mesh refinement. Changed Performance: Bower-Watson point insertion algorithm has been optimised and is based on the breadth-first search. Refactor: moved a few methods from jobs into TriangulatorNativeData. Refactor: structures have more compact layout. 1.1.0 ⁠– 2022-03-27 Added Add support for Constraint Delaunay Triangulation. Selected edges can be constrained e.g. for restoring the boundary. The feature currently does not support mesh refinement. Basic validation of the input positions as well as input constraint edges. Deprecated Refactor of input/output data buffers, some of them are marked as obsoletes. 1.0.1 ⁠– 2021-11-24 Changed Util function GetCircumcenter has been optimized. It is faster and more stable. Unity packages have been updated (Note: there was API changed in FixedList<T>). 1.0.0 ⁠– 2021-10-26 Added Initial release version"
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": ""
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| BurstTriangulator",
    "keywords": "MIT License Copyright (c) 2021 Andrzej Więckowski, Ph.D. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/advanced/generic-coordinates.html": {
    "href": "manual/advanced/generic-coordinates.html",
    "title": "Generic coordinates | BurstTriangulator",
    "keywords": "Generic coordinates The package supports generic coordinates. Currently, support is provided for float2, double2, Vector2, fp2 and int2. By default, the Triangulator class is based on the double2 type. To manually select the desired coordinate type, use the generic version, namely, Triangulator<T2>. using var positions = new NativeArray<float2>(..., Allocator.Persistent); using var triangulator = new Triangulator<float2>(Allocator.Persistent) { Input = { Positions = positions }, }; triangulator.Run(); Triangulator<T2> has the same API (through Extensions), as Triangulator. The only difference is that the input/output types are the same as T2. See benchmark for the generic coordinates here. type delaunay constraints holes refinement preprocessors notes float2 ✔️ ✔️ ✔️ ✔️ ✔️ Vector2 ✔️ ✔️ ✔️ ✔️ ✔️ Via float2 reinterpret double2 ✔️ ✔️ ✔️ ✔️ ✔️ fp2 ✔️ ✔️ ✔️ ✔️ ✔️ Requires additional package1 int2 ✔️ ✔️ 🟡2 ❌ 🟡3 Support up to \\(\\sim 2^{20}\\) This feature is available through an optional dependency. Users must install com.danielmansson.mathematics.fixedpoint. See how to install it here.↩ In the current implementation, holes are fully supported with Settings.AutoHolesAndBoundary. However, manual holes with int2 coordinates may not guarantee that the given hole can be created. An additional extension is planned in the future to support holes with manual floating-point precision for int2.↩ Support for Preprocessor.COM with translation only is available.↩"
  },
  "manual/advanced/input-jobs.html": {
    "href": "manual/advanced/input-jobs.html",
    "title": "Unity.Jobs support | BurstTriangulator",
    "keywords": "Unity.Jobs support Add triangulation to job pipeline This package supports scheduling with Unity.Jobs. You can learn about the job system here. To schedule triangulation, use the Schedule method: dependencies = triangulator.Schedule(dependencies); Catching errors in the job If the triangulation algorithm fails, checking the status and handling it in the job pipeline can be considered. For example: [BurstCompile] private struct Job : IJob { NativeReference<Status>.ReadOnly status; public Job(Triangulator triangulator) { status = triangulator.Output.Status.AsReadOnly(); } public void Execute() { if (status != Status.OK) { return; } ... } } ... var dependencies = default(JobHandle); dependencies = triangulator.Schedule(dependencies); dependencies = new Job(triangulator).Schedule(dependencies); ... Generating input in the job Input can be generated within a job pipeline. You have to use deferred arrays. Here's an example snippet: using var positions = new NativeList<double2>(64, Allocator.Persistent); using var constraints = new NativeList<int>(64, Allocator.Persistent); using var holes = new NativeList<double2>(64, Allocator.Persistent); using var triangulator = new Triangulator(64, Allocator.Persistent) { Input = { Positions = positions.AsDeferredJobArray(), ConstraintEdges = constraints.AsDeferredJobArray(), HoleSeeds = holes.AsDeferredJobArray() } } var dependencies = new JobHandle(); dependencies = new GenerateInputJob(positions, constraints, holes).Schedule(dependencies); dependencies = triangulator.Schedule(dependencies); dependencies.Complete();"
  },
  "manual/advanced/input-managed.html": {
    "href": "manual/advanced/input-managed.html",
    "title": "Managed input support | BurstTriangulator",
    "keywords": "Managed input support This package provides an extension for easily adapting managed arrays (i.e., standard C# arrays T2[]) for use as input in triangulation. To achieve this, you can use the AsNativeArrayextension. However, the user must manually release the data from the garbage collector by calling Handle.Free(). This step ensures that the garbage collector does not prematurely release memory, preventing accidental memory issues. using var triangulator = new Triangulator<float2>(Allocator.Persistent) { Input = new ManagedInput<float2> { Positions = new float2[] { new(0, 0), new(1, 0), new(1, 1), new(0, 1) }.AsNativeArray(out var handle) }, }; ... handle.Free(); Note AsNativeArray is allocation-free. It provides native array views for triangulation without additional memory allocation."
  },
  "manual/advanced/input-validation.html": {
    "href": "manual/advanced/input-validation.html",
    "title": "Input validation | BurstTriangulator",
    "keywords": "Input validation If ValidateInput is set to true, the provided data will be validated before running the triangulation procedure. Input positions, as well as input constraints, have several restrictions: Points count must be greater/equal 3. Points positions cannot be duplicated. Points cannot contain NaNs or infinities. Constraint edges cannot intersect with each other. Constraint edges cannot be duplicated or swapped duplicated. Zero-length constraint edges are forbidden. Constraint edges cannot intersect with points other than the points for which they are defined. If any of these conditions fail, triangulation will not be calculated. You can catch this as an error by using Status (native, can be used in jobs). using var triangulator = new Triangulator(Allocator.Persistent) { Input = { ... }, Settings = { ValidateInput = true }, }; triangulator.Run(); var status = triangulator.Output.Status.Value; Warning Input validation can be expensive. If you are certain of your input, consider disabling this option for additional performance."
  },
  "manual/advanced/output-halfedges.html": {
    "href": "manual/advanced/output-halfedges.html",
    "title": "Halfedges | BurstTriangulator",
    "keywords": "Halfedges For each successful triangulation (with any settings) except triangles and positions, one can get Output.Halfedges. Halfedges are a data structure that describes neighboring triangles. All triangles in the generated mesh are clockwise. For example, consider triangle \\((a, b, c)\\) (at indexes: \\(i, i+1, i+2\\) in Output.Triangles), which is made of 3 halfedges \\((a, b)\\), \\((b, c)\\), \\((c, a)\\). A halfedge is a directed edge, i.e., \\((i, j) \\neq (j, i)\\). In the halfedges buffer, one can find the \\(\\mathtt{id}\\) of the opposite halfedge, if it exists. In the case when the opposite halfedge is not present in a mesh, then Output.Triangles[id] = -1. using var triangulator = new Triangulator(Allocator.Persistent){ Input = { ... } }; triangulator.Run(); var halfedges = triangulator.Output.Halfedges; Consider the following example where \\(\\triangle\\) stands for triangles and \\(\\mathtt{he}\\) for the halfedges buffer. \\[ \\begin{array} {c|ccc|ccc|ccc|ccc} \\mathtt{id} & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11\\\\\\hline \\triangle & 0 & 4 & 1 & 1 & 4 & 2 & 2 & 4 & 3 & 3 & 4 & 0\\\\ \\mathtt{he} & 10 & 3 & -1 & 1 & 6 & -1 & 4 & 9 & -1 & 7 & 0 & -1 \\end{array} \\] For more details follow the delaunator guide. Constrained halfedges When performing constrained triangulation, you can determine whether a given halfedge is constrained by using Output.ConstrainedHalfedges. var constrainedHalfedges = triangulator.Output.ConstrainedHalfedges; This information can be particularly useful during post-processing by the user. Note If constraint edges (Input.ConstraintEdges) are not provided and mesh refinement (Settings.RefineMesh) is enabled, constrained halfedges are automatically set to true for boundary edges (i.e., for which halfedges[i] == -1)."
  },
  "manual/advanced/preprocessor.html": {
    "href": "manual/advanced/preprocessor.html",
    "title": "Preprocessor | BurstTriangulator",
    "keywords": "Preprocessor Triangulation for non-uniform data can be demanding, and a few algorithm steps may get stuck if the data is not preprocessed properly. It is highly recommended that the user prepares the input data on their own; however, this project provides a few built-in methods. Preprocessor Description None Default, no effect. COM Transforms input into normalized local space, i.e. [-1, 1] box. PCA Transforms input into normalized coordinate systems obtained with principal component analysis. To use one of the following preprocessors, use the corresponding settings: triangulator.Settings.Preprocessor = Triangulator.Preprocessor.COM; PCA transformation This algorithm can help in situations when the Sloan algorithm gets stuck. The transformation can be applied using the following steps: Calculate com: \\(\\mu = \\displaystyle\\frac1n\\sum_{i=1}^n x_i\\). Transform points: \\(x_i \\to x_i -\\mu\\). Calculate covariance matrix: \\(\\text{cov} = \\frac1n\\sum_i x_i x_i^{\\mathsf T}\\). Solve eigenproblem for \\(\\text{cov}\\): \\(\\text{cov}u_i =v_i u_i\\). Transform points using matrix \\(U = [u_i]\\): \\(x_i \\to U^{\\mathsf T} .x_i\\). Calculate vector center \\(c = \\frac12[\\max(x_i) + \\min(x_i)]\\) and vector scale \\(s=2/[\\max(x_i) - \\min(x_i)]\\), where \\(\\min\\), \\(\\max\\), and \"\\(/\\)\" are component wise operators. Transform points: \\(x_i \\to s (x_i-c)\\), assuming component wise multiplication. To summarize, the transformation is given by: \\[ \\boxed{x_i \\to s[U^{\\mathsf T}(x_i - \\mu) - c]} \\] and the inverse transformation: \\[ \\boxed{x_i \\to U(x_i / s + c) + \\mu}. \\] Note The PCA transformation does not preserve the RefinementThresholds.Angle used for refinement. As a result, triangles can be classified as bad in the PCA local space."
  },
  "manual/advanced/unsafe-triangulator.html": {
    "href": "manual/advanced/unsafe-triangulator.html",
    "title": "Unsafe Triangulator | BurstTriangulator",
    "keywords": "Unsafe Triangulator Caution Use the unsafe context with caution! Ensure that you fully understand what you are doing. It is recommended to first familiarize yourself with the managed Triangulator. Using the unsafe triangulator can lead to unexpected behavior if not used correctly. Unsafe in this context indicates that this API may be challenging for beginner users. The user is responsible for managing data allocation (both input and output). Note that some permutations of method calls may not be supported. The term unsafe does not refer to memory safety. The package also provides a low-level API through UnsafeTriangulator<T2>. This can be used for customization of the triangulation and for use in a native context. To use this, similar to Unity.Collections, you need to load the low-level namespace: using andywiecko.BurstTriangulator.LowLevel.Unsafe; UnsafeTriangulator<T2> is an empty readonly struct which provide API which can be used directly in native context in the jobs pipeline. Additionally this struct allows much more customization with respect to managed Triangulator<T2>, however, the user is responsible to data allocation, including output data. Below one can find minimal working example using UnsafeTriangulator<T2> using var positions = new NativeArray<float2>(..., Allocator.Temp); using var triangles = new NativeArray<int>(64, Allocator.Temp); new UnsafeTriangulator<float2>().Triangulate( input: new() { Positions = positions }, output: new() { Triangles = triangles }, args: Args.Default(), allocator: Allocator.Persistent ); this corresponds to the following managed approach with Triangulator<T2> using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = new float2[]{ ... }.AsNativeArray() } }; triangulator.Run(); var triangles = triangulator.Output.Triangles; Learn more in the Parameters section about how to set up the triangulation and the Extensions section to learn about other customization steps for triangulation. Parameters All extension methods related to UnsafeTriangulator<T2> API except standard additional parameters, include custom struct parameters: LowLevel.Unsafe.InputData<T2>, LowLevel.Unsafe.OutputData<T2>, LowLevel.Unsafe.Args. The first two structs are the same as managed types InputData<T2> and OutputData<T2>, respectively. They have the same fields/properties. Similar situation is with LowLevel.Unsafe.Args and managed corresponding TriangulationSettings, however the first, one is readonly struct and cannot be easily modified. Due to current C# lang version restriction used in Unity structs cannot have default values for field and properties. To create Args manually use Args.Default() method and pass parameter which you want to change from default value, e.g. var args = Args.Default(refineMesh: true); To \"modify\" the LowLevel.Unsafe.Args, one can use the With method. This method returns new args with the selected parameters replaced. For example: var args = Args.Default(); args = args.With(refineMesh: true); LowLevel.Unsafe.Args can be implicitly converted from TriangulationSettings. So one can store TriangulationSettings as a serialized field in a MonoBehaviour and cast to args if necessary var settings = new TriangulationSettings(); Args args = settings; Extensions Below, you can find extensions (with descriptions and examples) that can be used with UnsafeTriangulator. Check out the unit tests for additional use cases. Triangulate The extension Triangulate(input, output, args, allocator) is the simplest option to use. The action of this extension essentially produces the same result as the Run method for the managed Triangulator. It can be useful when triangulation is done with Allocator.Temp in a single job or to combine this with different extensions. using var positions = new NativeArray<float2>(..., Allocator.Persistent); using var constraints = new NativeArray<int>(..., Allocator.Persistent); using var holesSeeds = new NativeArray<float2>(..., Allocator.Persistent); using var triangles = new NativeList<int>(64, Allocator.Persistent); new UnsafeTriangulator<float2>().Triangulate( input: new() { Positions = positions, ConstraintEdges = constraints, HoleSeeds = holesSeeds }, output: new() { Triangles = triangles }, args: Args.Default(refineMesh: true, restoreBoundary: true), allocator: Allocator.Persistent ); PlantHoleSeeds The extension PlantHoleSeeds(input, output, args, allocator) is particularly useful when the user requires mesh data without removed triangles and additional mesh copy with removed triangles. In this case, the triangulation is performed once, which is generally a more expensive operation. Below is an example usage with the autoHolesAndBoundary option selected: var input = new LowLevel.Unsafe.InputData<double2> { Positions = ..., ConstraintEdges = ..., }; using var triangles = new NativeList<int>(Allocator.Persistent); using var halfedges = new NativeList<int>(Allocator.Persistent); using var constrainedHalfedges = new NativeList<bool>(Allocator.Persistent); var output = new LowLevel.Unsafe.OutputData<double2> { Triangles = triangles, Halfedges = halfedges, ConstrainedHalfedges = constrainedHalfedges, }; var args = Args.Default(); var t = new UnsafeTriangulator<double2>(); t.Triangulate(input, output, args), Allocator.Persistent); t.PlantHoleSeeds(input, output, args.With(autoHolesAndBoundary: true), Allocator.Persistent); Note Depending on the options, some of the buffers may not be required for PlantHoleSeeds. For example, when the user provides HoleSeeds in InputData<T2>, Positions in OutputData<T2> must be provided. However, in other cases, it may not be required. RefineMesh The extension RefineMesh(output, allocator, areaThreshold?, angleThreshold?, concentricShells?, constrainBoundary?) can be used to refine any triangulation mesh, even an already refined one. Please note that both the managed TriangulationSettings and native Args provide refinement parameter setups only for float precision. This extension allows you to provide these parameters with the selected precision type T in generics. These parameters have the following default values (in the given precision type T, if this extension is available for T): areaThreshold = 1; angleThreshold = math.radians(5) concentricShells = 0.001 The last optional parameter, constrainBoundary, is used to constrain boundary halfedges. Since the refinement algorithm (whether for constrained triangulation or not) requires constrained halfedges at the boundary, not setting this option may cause unexpected behavior, especially when the restoreBoundary option is disabled. Below is an example of refinement in the unsafe context: using var triangles = new NativeList<int>(Allocator.Persistent); using var halfedges = new NativeList<int>(Allocator.Persistent); using var constrainedHalfedges = new NativeList<bool>(Allocator.Persistent); using var outputPositions = new NativeList<float2>(Allocator.Persistent); var input = new LowLevel.Unsafe.InputData<float2> { Positions = ..., ConstraintEdges = ..., }; var output = new LowLevel.Unsafe.OutputData<float2> { Triangles = triangles, Halfedges = halfedges, Positions = outputPositions, ConstrainedHalfedges = constrainedHalfedges }; var t = new UnsafeTriangulator<float2>(); t.Triangulate(input, output, Args.Default(restoreBoundary: true), Allocator.Persistent); t.RefineMesh(output, Allocator.Persistent, areaThreshold: 1, angleThreshold: 0.5f, constrainBoundary: false);"
  },
  "manual/benchmark.html": {
    "href": "manual/benchmark.html",
    "title": "Benchmark | BurstTriangulator",
    "keywords": "Benchmark The package utilizes the Burst compiler, which generates highly optimized native code using LLVM. Other packages Below, you'll find a performance comparison for classic Delaunay triangulation (without refinement or constraints). between this package and a few alternatives: delaunator-sharp CGALDotNet Triangle.NET Delaunay triangulation Below, you'll find a performance comparison (with Burst enabled) between v2.0, v2.1, and v3.0 for classic Delaunay triangulation (without refinement or constraints). The presented result is for T2 = float2. Contrained triangulation Below, you can find a benchmark for constrained triangulation for v2.1, v2.2, and v3.0. The test specimen consists of a 100×100 grid with additional #constraints-points distributed in a circle at the center of the grid. In some cases of v2.1, the algorithm gets stuck. Reference timings for non-constrained triangulation for v2.2 and v3.0 are marked with a dashed line. In the figure below, you can also see example test cases: red represents resulting triangles, and blue represents constrained edges. The presented result is for T2 = float2. Delaunay triangulation with mesh refinement Furthermore, we present a performance comparison (with Burst enabled) between v1.0, v2.0, v2.3, v2.4, and v3.0 for the refinement task. The presented result is for T2 = float2. Note Since v2.4, the triangulation refinement algorithm has been updated, resulting in improved mesh quality. Generic coordinates Below, one can see the benchmark for generic coordinates for Delaunay triangulation. float2 seems to be slightly faster than double2, however, any significant difference is noticeable only for very large inputs."
  },
  "manual/examples/constrained-triangulation.html": {
    "href": "manual/examples/constrained-triangulation.html",
    "title": "Constrained triangulation | BurstTriangulator",
    "keywords": "Constrained triangulation ConstraintEdges Input It is not guaranteed that all edges in the input will be present in the classic Delaunay triangulation result. To ensure specific edges \\(\\{(i, j)\\}\\) are included in the final triangulation, specify the constraints in Input.ConstraintEdges. Provide additional input data as a continuous index array: \\[ [a_0, a_1, b_0, b_1, c_0, c_1, \\dots] \\] This corresponds to constraint edges \\(\\{ (a_0, a_1), (b_0, b_1), (c_0, c_1), \\dots\\}\\). using var constraintEdges = new NativeArray<int>(..., Allocator.Persistent); using var positions = new NativeArray<double2>(..., Allocator.Persistent); using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = positions, ConstraintEdges = constraintEdges, }, }; triangulator.Run(); var triangles = triangulator.Output.Triangles; After providing the corresponding input for the constraints, the result of the constrained triangulation fully covers all specified edges by the user. Constrained triangulation with refinement Constrained triangulation can also be refined in the same manner as non-constrained triangulation by enabling corresponding options in the triangulation settings: triangulator.Settings.RefineMesh = true; After enabling refinement and the constraints, and providing the input, the result of the constrained triangulation fully covers all specified edges by the user, and the mesh is refined according to the given refinement conditions. Warning Without restoring boundaries, the result of mesh refinement, especially in cases with very acute angles, can be of poor quality. Compare this with the result presented in the holes and boundaries example."
  },
  "manual/examples/holes-and-boundaries.html": {
    "href": "manual/examples/holes-and-boundaries.html",
    "title": "Holes and boundaries | BurstTriangulator",
    "keywords": "Holes and boundaries Restoring boundaries The package also provides an option for restoring boundaries. In addition to setting the RestoreBoundary property, one needs to provide edge constraints to restore the boundaries. using var constraintEdges = new NativeArray<int>(..., Allocator.Persistent); using var positions = new NativeArray<double2>(..., Allocator.Persistent); using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = positions, ConstraintEdges = constraintEdges, }, Settings = { RestoreBoundary = true, } }; triangulator.Run(); var triangles = triangulator.Output.Triangles; Holes supports The package also provides an option for creating holes. In addition to setting the Input.ConstraintEdges, a user needs to provide positions of the holes in the same space as the Input.Positions. Enabling the RestoreBoundary option is not mandatory; holes could be introduced independently of preserving the boundaries. using var constraintEdges = new NativeArray<int>(..., Allocator.Persistent); using var holes = new NativeArray<double2>(..., Allocator.Persistent); using var positions = new NativeArray<double2>(..., Allocator.Persistent); using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = positions, ConstraintEdges = constraintEdges, HoleSeeds = holes, }, Settings = { RestoreBoundary = true, // optional can be set independently } }; triangulator.Run(); var triangles = triangulator.Output.Triangles; Auto holes and boundary The package also provides automatic hole detection and restoring boundary. If one sets Settings.AutoHolesAndBoundary to true, then holes will be created automatically depending on the provided constraints. using var positions = new NativeArray<double2>(..., Allocator.Persistent); using var constraintEdges = new NativeArray<int>(..., Allocator.Persistent); using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = positions, ConstraintEdges = constraintEdges, }, Settings = { AutoHolesAndBoundary = true, }, }; triangulator.Run(); var triangles = triangulator.Output.Triangles; Warning The current implementation of AutoHolesAndBoundary detects only 1-level islands. It will not detect holes in solid meshes inside other holes."
  },
  "manual/examples/index.html": {
    "href": "manual/examples/index.html",
    "title": "Example usage | BurstTriangulator",
    "keywords": "Example usage Below is an example usage of the Triangulator with an input set consisting of four points that form the unit square: using var positions = new NativeArray<double2>(new double2[] { new(0, 0), new(1, 0), new(1, 1), new(0, 1), }, Allocator.Persistent); using var triangulator = new Triangulator(capacity: 1024, Allocator.Persistent) { Input = { Positions = positions } }; triangulator.Run(); var triangles = triangulator.Output.Triangles; Tip The triangulator.Run() method runs on the main thread. If you want to call this within a jobs pipeline, schedule a job using triangulator.Schedule(dependencies). Click here to learn how to use triangulation within a jobs pipeline. If triangulation fails for some reason, you can catch the information using Status status = triangulator.Output.Status.Value; if (status != Status.OK) // ERROR! { return; } The result of the triangulation procedure will depend on the selected settings. There are a few settings for triangulation, which are briefly described in the API documentation. Follow the articles in the manual to learn more about settings. In other examples, the following cool guitar was used as an input test case:"
  },
  "manual/examples/mesh-refinement.html": {
    "href": "manual/examples/mesh-refinement.html",
    "title": "Triangulation with refinement | BurstTriangulator",
    "keywords": "Triangulation with refinement To proceed with triangulation using mesh refinement, set RefineMesh to true and specify the required RefinementThresholds: using var inputPositions = new NativeArray<double2>(..., Allocator.Persistent); using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = inputPositions }, Settings = { RefineMesh = true, RefinementThresholds = { Area = 1f, Angle = math.radians(20f) }, } }; triangulator.Run(); var triangles = triangulator.Output.Triangles; var positions = triangulator.Output.Positions; The refinement process is controlled by two threshold parameters: Area: denoted as \\(C_\\triangle\\) Angle: denoted as \\(C_\\theta\\) These parameters allow fine-tuning of the refinement results based on specific criteria. Below, you can observe a set of results obtained by applying the refinement process to input data from Lake Superior (open the image in a new tab to see the details). Note Refinement is available for both constrained and non-constrained triangulation."
  },
  "manual/examples/triangulation.html": {
    "href": "manual/examples/triangulation.html",
    "title": "Delaunay triangulation | BurstTriangulator",
    "keywords": "Delaunay triangulation To perform a classic, i.e., non-constrained without refinement, Delaunay triangulation, use the following: using var positions = new NativeArray<double2>(..., Allocator.Persistent); using var triangulator = new Triangulator(Allocator.Persistent) { Input = { Positions = positions } }; triangulator.Run(); var triangles = triangulator.Output.Triangles; Tip Classic triangulation will produce convex hull of the given input. To learn how to restore the boundary click here."
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting started | BurstTriangulator",
    "keywords": "Getting started Install the package using one of the following methods. Using OpenUPM is recommended. OpenUPM git Manual Copy Follow the tutorial at OpenUPM docs. Alternatively, you can set up manifest.json manually. Add or modify scoped registries in the manifest: \"scopedRegistries\": [ { \"name\": \"OpenUPM\", \"url\": \"https://package.openupm.com/\", \"scopes\": [ \"com.andywiecko\" ] } ] Then, in the dependencies section, provide the desired version of the package: \"dependencies\": { \"com.andywiecko.burst.triangulator\": \"3.2.0\", ... Refer to the Unity docs for more details. Use the package manager via git install: https://github.com/andywiecko/BurstTriangulator.git Alternatively, you can edit manifest.json manually: \"dependencies\": { \"com.andywiecko.burst.triangulator\": \"https://github.com/andywiecko/BurstTriangulator.git\", ... Note By default this method will install the latest commit from the main branch of the project repo. You can specify a tag or commit by providing an additional hash, e.g. to install package v2.4.0 use: https://github.com/andywiecko/BurstTriangulator.git#v2.4.0; to install package at commit f206441912d8b3fda00fe7438db2a1eec4da5a64 use: https://github.com/andywiecko/BurstTriangulator.git#f206441912d8b3fda00fe7438db2a1eec4da5a64. Clone or download this repository and then select package.json using Package Manager (Window/Package Manager). Since the package is single-file only, one can place the file Runtime/Triangulator.cs somewhere in the project to use it independently. Just remember to install the proper package dependencies. Dependencies BurstTriangulator has the following dependencies: Unity.Burst@1.8.7 Unity.Collections@2.2.0 Optional dependencies If you need fixed-point arithmetic, there is an optional dependency: com.danielmansson.mathematics.fixedpoint@0.1.0. Currently, the package is not available on OpenUPM, so it is recommended to manually install it via manifest.json using the following Git URL: \"dependencies\": { \"com.danielmansson.mathematics.fixedpoint\": \"https://github.com/andywiecko/Unity.Mathematics.FixedPoint.git#d44836cab621f299d6d1bfa275daa437aafc739b\", ..."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "| BurstTriangulator",
    "keywords": "A single-file package which provides Delaunay triangulation of the given set of points with constraints and mesh refinement. To showcase the functionality of our package, we provide an illustrative example featuring the triangulation of Lake Superior using different refinement parameters. The top-left image displays the initial result without any refinement applied."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction | BurstTriangulator",
    "keywords": "Introduction Delaunay triangulation Triangulation is a process that converts a set of points into a triangles mesh. This package implements Delaunay triangulation, ensuring that every triangle's circumcircle contains no points from within the mesh. It's important to note that the result will be the convex hull of the input points. Given a set of positions \\(\\{p_i\\}\\) as input, the output is the triangulation \\(\\mathcal{T}\\). Constrained triangulation In addition to basic triangulation, users may want to enforce certain edges in the final mesh. This can be achieved by providing additional input specifying edge vertices. However, it's worth noting that the resulting triangulation may not maintain the Delaunay property. The input for constrained triangulation includes a set of positions \\(\\{p_i\\}\\) and constraint edges \\(\\{(i, j)\\}\\), with the output being the triangulation \\(\\mathcal{T}\\). Mesh refinement In computational simulations, accurately representing long, thin triangles is often challenging. To address this issue, additional points can be strategically inserted into the triangulation to eliminate these problematic elements. Since simulation time is typically proportional to the number of triangles, it's crucial to strike a balance: minimizing the number of triangles while maintaining sufficient detail for accurate results. In this process, denoted as mesh refinement, the input triangulation \\(\\mathcal{T}\\) is transformed into \\(\\mathcal{T'}\\) by inserting additional points to split edges or triangles. Restore boundary As previously mentioned, Delaunay triangulation produces the convex hull of points. To support non-convex shapes, edge constraints are introduced, and triangles not included in the boundary of the constraints are removed. Given a set of positions \\(\\{p_i\\}\\) and constraints \\(\\{(i, j)\\}\\) as input, the output is the triangulation \\(\\mathcal{T}\\), ensuring that the resulting mesh adheres to the specified boundary constraints. Holes Triangulation can be extended to support meshes with holes by using additional input data, such as hole seeds \\(\\{h_i\\}\\). However, this process can be automated in some cases, so the holes do not need to be present in the input data. Hole seeds act as starting points for a removal process resembling the spread of a virus. Starting from the triangle containing \\(h_i\\), neighboring triangles are successively removed until the search reaches the constraint edge. In this process, constraint edges act as barriers, preventing further propagation of the removal. Implementation In this package implemented classic Delaunay triangulation is based on delaunator and delaunator-sharp. Refinement algorithm is based on Ruppert's algorithm1 with Bowyer–Watson algorithm2 3 point insertion. Refinement procedure is inspired by Shewchuk's terminator algorithm4. The package provides also constrained triangulation (with mesh refinement) which is based on Sloan's algorithm5. Throughout these algorithms, the package utilizes the half-edges data structure. For further exploration, we recommend referring to the following article. Currently, the sequence of actions in the implementation follows: \\[ \\begin{array}{c} \\boxed{\\text{Preprocessor}}\\\\ \\Downarrow\\\\ \\boxed{\\text{Delaunay triangulation}}\\\\ \\Downarrow\\\\ \\boxed{\\text{Edge constraints}}\\\\ \\Downarrow\\\\ \\boxed{\\text{Planting holes}}\\\\ \\Downarrow\\\\ \\boxed{\\text{Refine mesh}}\\\\ \\Downarrow\\\\ \\boxed{\\text{Postprocessor}}\\\\ \\end{array} \\] Bibliography J. Ruppert. \"A Delaunay Refinement Algorithm for Quality 2-Dimensional Mesh Generation\". J. Algorithms 18(3):548-585 (1995).↩ A. Bowyer. \"Computing Dirichlet tessellations\". Comput. J. 24 (2): 162–166 (1981).↩ D. F. Watson. \"Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes\". Comput. J. 24 (2): 167–172 (1981).↩ J. R. Shewchuk. \"Delaunay refinement algorithms for triangular mesh generation.\" Comput. Geom. 22.1-3 (2002).↩ S. W. Sloan. \"A fast algorithm for generating constrained Delaunay triangulations.\" Comput. Struct. 47.3:441-450 (1993).↩"
  },
  "manual/known-issues.html": {
    "href": "manual/known-issues.html",
    "title": "Known Issues | BurstTriangulator",
    "keywords": "Known Issues #103: Leak Detected Warning in the Console In the Unity Editor, you may encounter the following log message: Leak Detected : Persistent allocates 257 individual allocations. To find out more please enable 'Jobs/LeakDetection/Full StackTraces' and reproduce the leak again. Not to worry, this issue is likely related to an internal bug in the Unity.Collections or Unity.Burst package (related to NativeQueue<> allocation). #105, #106: Incorrect triangulations for complicated input Due to floating-point precision, triangulation may fail for some input. This is often related to single-point precision. Changing coordinates from float2 to double2 solves the issue. This will be addressed in the upcoming release. If you want to try it now, there is an experimental branch available here."
  }
}